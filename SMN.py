#SMN
ver='2.1.1'
proj='SMN'
#github.com/smcclennon/SMN


#m1: import
print("Importing required libraries...")
import time
importstart=time.time()
try:
    import os,datetime,socket,urllib.request,sys,platform,json
except:
    print('\nError: unable to import one or more libraries\nVisit: github.com/smcclennon/SMN for support\n\nPress enter to exit...')
    input()
    exit()
try:
    import psutil
except:
    print('\nError: unable to import "psutil"')
    confirm=input(str('Attempt to install "psutil"? [Y/n] ')).upper()
    if confirm=='Y':
        try:
            os.system('pip install psutil --user')
            os.system('cls')
            os.system('"'+str(os.path.basename(__file__))+'"')
            exit()
        except:
            print('Failed to install "psutil"\nPress enter to exit...')
        input()
        exit()
    exit()
importend=time.time()
importduration=importend-importstart
print("Import completed in "+str(round(importduration, 2))+" seconds")



#m2: rules
online=0
def cmd(cmd):
    os.system(cmd)
def cls():
    cmd('cls')
def colour(var):
    cmd('color '+str(var))
def wtitle(var):
    cmd('title '+str(var))
appid='Scan Me Now'
appname=f'{appid} v{ver}'
def appjob(job):
    if online==1:
        wtitle(f'{appname} [Online] - {job}')
    elif online==0:
        wtitle(f'{appname} [Offline] - {job}')

#update
updateAttempt=0
appjob('Checking for updates...')
print('Checking for updates...')
try: #remove previous version if just updated
    global proj
    with open(proj+'.tmp', 'r') as content_file:
        oldFile=str(content_file.read())
        if oldFile != os.path.basename(__file__): #if the old version has the current filename, don't delete
            os.remove(oldFile)
    os.remove(proj+'.tmp')
except:
    pass
while updateAttempt<3:
    updateAttempt=updateAttempt+1
    try: #Get latest version number (2.0.0)
        with urllib.request.urlopen("https://smcclennon.github.io/update/api/2") as url:
            online=1
            global repo
            repo=[]
            for line in url.readlines():
                repo.append(line.decode().strip())
            api=repo[0] #latest release details
            proj=repo[1] #project name
            ddl=repo[2] #direct download
        with urllib.request.urlopen(api) as url:
            data = json.loads(url.read().decode())
            latest=data['tag_name'][1:]
            patchNotes=data['body']
        updateAttempt=3
    except:
        latest='0'
if latest>ver:
    print('\nUpdate available!')
    print('Latest Version: v'+latest)
    print('\n'+str(patchNotes)+'\n')
    confirm=input(str('Update now? [Y/n] ')).upper()
    if confirm=='Y':
        latestFilename=proj+' v'+str(latest)+'.py'
        print('Downloading '+latestFilename+'...') #Download latest version to cwd
        urllib.request.urlretrieve(ddl, latestFilename)
        f=open(proj+'.tmp', 'w') #write the current filename to SMN.tmp
        f.write(str(os.path.basename(__file__)))
        f.close()
        os.system('cls')
        os.system('"'+latestFilename+'"') #open latest version
        exit()

#configure scan
appjob("Choose scan type")
print('\nS: Full System Scan\nN: Full Network Scan\nP: System & Network Scan (without current TCP/IP network connections)\nA: Full System & Network Scan')
logtype=input(str('What would you like to log? [S/N/P/A] ')).upper()
globalstart=time.time()
if logtype in ('S', 'N', 'P', 'A'):
    if logtype=='P':
        full=0
    elif logtype in ('N', 'A'):
        full=1
else:
    logtype='P'
    full=0
    print('Invalid scan-type. Defaulting to P')

hostname=str(socket.gethostname()) #computer name, used for filenames

#system info scan
colour('3f')
if logtype in ('S', 'P', 'A'):
    appjob('Performing System Info Scan...')
    print("\nPerforming System Info Scan...")
    sysinfostart=time.time()
    print("[Preparing to log]")
    sysinfo='System Info Logs'
    sysinfodir=sysinfo+'\\'
    if not os.path.exists(sysinfo):
        os.makedirs(sysinfo)
    print("[Logging: Summary]")
    file=open(sysinfodir+hostname+".log","w")
    file.write("=Log Generated By ["+appname+"]=\n")
    file.write(datetime.datetime.now().strftime("[%d/%m/%Y] - [%H:%M:%S]"))
    file.write("\n\n===Summary===")
    file.write("\nName: "+socket.gethostname())
    file.write("\nFQDN: "+socket.getfqdn())
    file.write("\nSystem Platform: "+sys.platform)
    file.write("\nMachine: "+platform.machine())
    file.write("\nNode: "+platform.node())
    file.write("\nPlatform: "+platform.platform())
    file.write("\nProcessor: "+platform.processor())
    file.write("\nSystem OS: "+platform.system())
    file.write("\nRelease: "+platform.release())
    file.write("\nVersion: "+platform.version())
    file.write("\nNumber of CPUs: "+str(psutil.cpu_count()))
    file.write("\nNumber of Physical CPUs: "+str(psutil.cpu_count(logical=False)))
    file.write("\n\n===OS Generated Info===")
    file.close()
    print("[Logging: OS Generated Info]")
    cmd('systeminfo >"'+sysinfodir+hostname+'.log.tmp"')
    open(sysinfodir+hostname+".log", "a").writelines(open(sysinfodir+hostname+".log.tmp").readlines())
    os.remove(sysinfodir+hostname+".log.tmp")
    sysinfoend=time.time()
    sysinfoduration=sysinfoend-sysinfostart
    file=open(sysinfodir+hostname+".log","a")
    file.write("\n\n===================\nLog completed in "+str(round(sysinfoduration, 2))+" seconds")
    file.close()
    print("Log completed in "+str(round(sysinfoduration, 2))+" seconds")

if logtype in ('N', 'P', 'A'):
    #network scan
    appjob('Performing Network Scan...')
    print("\nPerforming Network Scan...")
    netmapstart=time.time()
    print("[Preparing to log]")
    netmap='Network Logs'
    netmapdir=netmap+'\\'
    netip=socket.gethostbyname(socket.gethostname()) #ipv4 network IP
    try:
        pubip=urllib.request.urlopen('https://ident.me').read().decode('utf8') #public IP
        online=1
    except:
        print('[Error: No internet connection - Results will be limited]')
        pubip='[Error: No internet connection]'
        online=0
    if not os.path.exists(netmap):
        os.makedirs(netmap)
    if online==1:
        filename=str(hostname+" ["+netip+"]")
    elif online==0:
        filename=str(hostname+" ["+netip+"] [OFFLINE]")
    print("[Logging: Summary]")
    file=open(netmapdir+filename+".log","w")
    file.write("=Log Generated By ["+appname+"]=\n")
    file.write(datetime.datetime.now().strftime("[%d/%m/%Y] - [%H:%M:%S]"))
    if full==1:
        file.write('\nScan Type: Full')
    elif full==0:
        file.write('\nScan Type: Partial')
    if online==0:
        file.write('\n\nError: No internet connection\nResults will be limited')
    file.write("\n\n===Summary===")
    file.write("\nHost Name: "+hostname)
    file.write("\nNetwork IP: "+netip)
    file.write("\nPublic IP: "+pubip)
    file.close()
    file=open(netmapdir+filename+".log","a")
    print("[Logging: Windows IP Configuration]")
    file.write("\n\n===Windows IP Configuration===")
    cmd('ipconfig /all >"'+netmapdir+filename+'.log.tmp"')
    file.writelines(open(netmapdir+filename+".log.tmp").readlines())
    os.remove(netmapdir+filename+".log.tmp")
    file.flush()
    print("[Logging: Routing Table]")
    file.write("\n\n==Routing Table==")
    cmd('netstat -r >"'+netmapdir+filename+'.log.tmp"')
    file.writelines(open(netmapdir+filename+".log.tmp").readlines())
    os.remove(netmapdir+filename+".log.tmp")
    file.flush()
    print("[Logging: IP-to-Physical address translation tables used by address resolution protocol (ARP)]")
    file.write("\n\n==IP-to-Physical address translation tables used by address resolution protocol (ARP)==")
    cmd('arp -a >"'+netmapdir+filename+'.log.tmp"')
    file.writelines(open(netmapdir+filename+".log.tmp").readlines())
    os.remove(netmapdir+filename+".log.tmp")
    file.flush()
if logtype in ('N', 'A'):
    print("[Logging: Protocol statistics and current TCP/IP network connections] [This might take a while!]")
    file.write("\n\n==Protocol statistics and current TCP/IP network connections==")
    cmd('netstat >"'+netmapdir+filename+'.log.tmp"')
    file.writelines(open(netmapdir+filename+".log.tmp").readlines())
    os.remove(netmapdir+filename+".log.tmp")
    file.flush()
    netmapend=time.time()
    netmapduration=netmapend-netmapstart
    file=open(netmapdir+filename+".log","a")
    file.write("\n\n===================\nLog completed in "+str(round(netmapduration, 2))+" seconds")
    print("Log completed in "+str(round(netmapduration, 2))+" seconds")


#m5: stats
file.close()
globalend=time.time()
globalduration=globalend-globalstart+importduration
appjob('Complete!')
print("\n\nAll "+proj+" Logging Jobs Completed In "+str(round(globalduration, 2))+" seconds")
cmd('timeout 5')
