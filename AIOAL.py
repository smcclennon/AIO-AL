#AIO-AL
version='v1.0.3'
#github.com/smcclennon


#m1: import
print("Importing required libraries...")
import time
globalstart=time.time(); importstart=time.time()
try:
    import os, datetime, socket, urllib.request, sys, platform, psutil
except:
    print('\n\n\nError: unable to import one or more libraries\nVisit: github.com/smcclennon for support\n\nPress any key to exit')
    os.system('pause>nul')
    exit()
importend=time.time()
importduration=importend-importstart
print("Import completed in "+str(round(importduration, 2))+" seconds")


#m2: rules
def cmd(cmd):
    os.system(cmd)
def cls():
    cmd('cls')
def colour(var):
    cmd('color '+str(var))
def wtitle(var):
    cmd('title '+str(var))
appid='A I O - A L'
appname=appid+"  "+version


#m3/mm1: sysinfo
wtitle(appname+" - Performing System Info Scan...")
colour('3f')
print("\nPerforming System Info Scan...")
sysinfostart=time.time()
print("[Preparing to log]")
sysinfo='System Info Logs'
sysinfodir=sysinfo+'\\'
hostname=str(socket.gethostname())
if not os.path.exists(sysinfo):
    os.makedirs(sysinfo)
print("[Logging: Summary]")
file=open(sysinfodir+hostname+".log","w")
file.write("=Log Generated By ["+appname+"]=\n")
file.write(datetime.datetime.now().strftime("[%d/%m/%Y] - [%H:%M:%S]"))
file.write("\n\n===Summary===")
file.write("\nName: "+socket.gethostname())
file.write("\nFQDN: "+socket.getfqdn())
file.write("\nSystem Platform: "+sys.platform)
file.write("\nMachine: "+platform.machine())
file.write("\nNode: "+platform.node())
file.write("\nPlatform: "+platform.platform())
file.write("\Processor: "+platform.processor())
file.write("\nSystem OS: "+platform.system())
file.write("\nRelease: "+platform.release())
file.write("\nVersion: "+platform.version())
file.write("\nNumber of CPUs: "+str(psutil.cpu_count()))
file.write("\nNumber of Physical CPUs: "+str(psutil.cpu_count(logical=False)))
file.write("\n\n===OS Generated Info===")
file.close()
print("[Logging: OS Generated Info]")
cmd('systeminfo >"'+sysinfodir+hostname+'.log.tmp"')
open(sysinfodir+hostname+".log", "a").writelines(open(sysinfodir+hostname+".log.tmp").readlines())
os.remove(sysinfodir+hostname+".log.tmp")
sysinfoend=time.time()
sysinfoduration=sysinfoend-sysinfostart
file=open(sysinfodir+hostname+".log","a")
file.write("\n\n===================\nLog completed in "+str(round(sysinfoduration, 2))+" seconds")
file.close()
print("Log completed in "+str(round(sysinfoduration, 2))+" seconds")


#m4/mm2: nmap
wtitle(appname+" - Performing Network Scan...")
print("\nPerforming Network Scan...")
netmapstart=time.time()
print("[Preparing to log]")
netmap='Network Logs'
netmapdir=netmap+'\\'
netip=socket.gethostbyname(socket.gethostname())
pubip=urllib.request.urlopen('https://ident.me').read().decode('utf8')
if not os.path.exists(netmap):
    os.makedirs(netmap)
filename=str(hostname+" ["+netip+"]")
print("[Logging: Summary]")
file=open(netmapdir+filename+".log","w")
file.write("=Log Generated By ["+appname+"]=\n")
file.write(datetime.datetime.now().strftime("[%d/%m/%Y] - [%H:%M:%S]"))
file.write("\n\n===Summary===")
file.write("\nHost Name: "+hostname)
file.write("\nNetwork IP: "+netip)
file.write("\nPublic IP: "+pubip)
file.write("\n\n===Windows IP Configuration===")
file.close()
file=open(netmapdir+filename+".log","a")
print("[Logging: Windows IP Configuration]")
cmd('ipconfig /all >"'+netmapdir+filename+'.log.tmp"')
file.writelines(open(netmapdir+filename+".log.tmp").readlines())
os.remove(netmapdir+filename+".log.tmp")
file.write("\n\n==Protocol statistics and current TCP/IP network connections==")
file.flush()
print("[Logging: Protocol statistics and current TCP/IP network connections]")
cmd('netstat >"'+netmapdir+filename+'.log.tmp"')
file.writelines(open(netmapdir+filename+".log.tmp").readlines())
os.remove(netmapdir+filename+".log.tmp")
file.write("\n\n==Routing Table==")
file.flush()
print("[Logging: Routing Table]")
cmd('netstat -r >"'+netmapdir+filename+'.log.tmp"')
file.writelines(open(netmapdir+filename+".log.tmp").readlines())
os.remove(netmapdir+filename+".log.tmp")
file.write("\n\n==IP-to-Physical address translation tables used by address resolution protocol (ARP)==")
file.flush()
print("[Logging: IP-to-Physical address translation tables used by address resolution protocol (ARP)]")
cmd('arp -a >"'+netmapdir+filename+'.log.tmp"')
file.writelines(open(netmapdir+filename+".log.tmp").readlines())
os.remove(netmapdir+filename+".log.tmp")
netmapend=time.time()
netmapduration=netmapend-netmapstart
file=open(netmapdir+filename+".log","a")
file.write("\n\n===================\nLog completed in "+str(round(netmapduration, 2))+" seconds")
file.close()
print("Log completed in "+str(round(netmapduration, 2))+" seconds")


#m5: stats
globalend=time.time()
globalduration=globalend-globalstart
wtitle(appname+" - Complete!")
print("\n\nAll AIO-AL Logging Jobs Completed In "+str(round(globalduration, 2))+" seconds")
cmd('timeout 5')